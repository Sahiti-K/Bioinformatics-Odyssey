# -*- coding: utf-8 -*-
"""01_Python_basics_DNA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Sahiti-K/Bioinformatics-Odyssey/blob/main/notebooks/01_Python_basics_DNA.ipynb

# Python Basics for Bioinformatics

Core Python fundamentals for biological data interpretation.


------

## Variables and Data Types
"""

# Biology-themed examples of Python data types
gene_length = 1500              # int
gc_content = 56.2               # float
gene_name = "BRCA1"             # string
has_start_codon = True          # boolean

print(type(gene_length), type(gc_content), type(gene_name), type(has_start_codon))

"""## String Operations"""

# DNA sequence stored as a string
dna = input('Enter your DNA sequence: ').upper() or "ATGCGTAC"

print("DNA Sequence:", dna)
print('Length:', len(dna))
print("A:", dna.count("A"))
print("T:", dna.count("T"))
print("G:", dna.count("G"))
print("C:", dna.count("C"))
print('GC Content:', (dna.count('G') + dna.count('C')) / len(dna) * 100)
print("First base:", dna[0])
print("Last 3 bases:", dna[-3:])
print("Codons (first 3):", dna[0:9])
print("RNA Transcript:", dna.replace("T", "U"))

"""##  Lists and Indexing

"""

# Lists store multiple values

bases = ['A', 'T', 'G', 'C']
print("All bases:", bases)
print("2nd base:", bases[1])

# You can loop through lists
for base in bases:
    print("Base:", base)

# Genes can be stored in a list
genes = ['BRCA1', 'TP53', 'EGFR']
print("Genes:", genes)
print(genes[0])
genes.append('MYC')
print("New genes:", genes)

"""###Functions"""

def gc_content(seq):
    # Returns GC content (%) of a DNA sequence.
    return (seq.count("G") + seq.count("C")) / len(seq) * 100

def transcribe(seq):
    # Converts DNA to RNA by replacing all thymine (T) with uracil (U)
    return seq.replace("T", "U")

def base_counts(seq):
    # Counts occurrences of each nucleotide (A, T, G, C) in the DNA sequence
    return {base: seq.count(base) for base in "ATGC"}

def has_start_codon(seq):
    # Checks if the DNA sequence contains a start codon 'ATG'
    return "ATG" in seq

def reverse_complement(seq):
    # Returns the reverse complement of a DNA sequence
    return seq.translate(str.maketrans("ATGC", "TACG"))[::-1]

def hamming_distance(s1, s2):
    # Calculates number of mismatched bases between two sequences of equal length
    return sum(c1 != c2 for c1, c2 in zip(s1, s2))

# Tests
print("GC%:", gc_content("GGGCCC"))
print("RNA:", transcribe("ATGC"))
print("Base counts:", base_counts("ATGCATGC"))
print("Start codon present?", has_start_codon("CGGATGCCGAT"))
print("Rev. Complement:", reverse_complement("ATGC"))
print("Hamming Distance:", hamming_distance("GAGCCT", "CATCGT"))

"""#Rosalind Problems

----

1. Counting DNA Nucleotides
2. Transcribing DNA to RNA
3. Counting Point Mutations

###Counting DNA Nucleotides
"""

def base_counts(seq):
    counts = {
        "A": seq.count("A"),
        "T": seq.count("T"),
        "G": seq.count("G"),
        "C": seq.count("C")
    }
    return counts
# Accepts sequence as input to make the function reusable
seq = input('Enter your DNA sequence: ').upper() or "ATGCGTAC"
print("Base counts:", base_counts(seq))

"""###Transcribing DNA into RNA"""

def Transcribe_DNA_to_RNA(seq):
    return seq.replace("T", "U")

seq = input('Enter your DNA sequence: ').upper() or "ATGCGTAC"
print("RNA: ",Transcribe_DNA_to_RNA(seq))

"""###Complementing a Strand of DNA

"""

def reverse_complement(dna):
    complement = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}
    return ''.join([complement[base] for base in reversed(dna)])
dna = input('Enter your DNA sequence: ').upper() or "ATGCGTAC"
print(reverse_complement(dna))

"""###Counting Point Mutations - Hamming Distance"""

def hamming_distance(s1, s2):
    return sum(c1 != c2 for c1, c2 in zip(s1, s2))
s1 = input('Enter your DNA sequence: ').upper() or "ATGCGTAC"
s2 = input('Enter your DNA sequence: ').upper() or "ATTCGCAG"
print(hamming_distance(s1, s2))
